#use-added-syntax(jitx)
defpackage FTDI/DebugIF:
  import core
  import jitx
  import jitx/commands
  import jitx/parts

  import jsl
  import power-systems

  import FTDI/components/FT2232HL


doc: \<DOC>
Debug Interface providing JTAG and UART over USB

This circuit presents a USB upstream device port which
allows the device to be connected to a USB Host like a
laptop.

The `FT2232H` component is made accessible via the `ftdi`
public child component. User should use pin assignment on this
child directly to access UARTs, JTAG, GPIO, etc for their
specific application.

@member VDD-3v3 Input voltage rail to support the USB Transceiver
User is responsible for providing the 3.3V supply rail that
supports the FTDI IC.
@member VDD-USB Output voltage rail provided by the USB connector.
This is a 5V rail by USB specification.
@member USB USB 2.0 Interface - Expects high-speed signal integrity constraint.
@member CFG 3-wire Microwire interface for the configuration EEPROM. This interface
is optional.
@param R-query Resistor Query Object for customizing resistor selection. Default is `get-default-resistor-query()`.
@param C-query Capacitor Query Object for customizing capacitor selection. Default is `get-default-capacitor-query()`.
<DOC>
public defn circuit (
  mode-a:FT2232H-Mode,
  mode-b:FT2232H-Mode --
  use-internal-1v8:True|False = true,
  self-powered-reset:True|False = true,
  R-query:ResistorQuery = get-default-resistor-query(),
  C-query:CapacitorQuery = get-default-capacitor-query()
  ):

  pcb-module circuit-int :

    port VDD-3v3 : power
    port VDD-USB : power

    port USB : usb-data
    port CFG : microwire-4()

    net GND (VDD-3v3.V-, VDD-USB.V-)

    public inst ftdi : FTDI/components/FT2232HL/device(mode-a, mode-b, use-internal-1v8 = true, R-query = R-query, C-query = C-query)

    net (VDD-3v3, ftdi.VCCIO)
    net (USB, ftdi.USB)

    ; Use ferrite filter on the VPLL and VPHY rails:

    val ferrite = passives/ferrite/BLM18KG(220)

    inst filt-VPLL : unbalanced-filter(ferrite)
    net (VDD-3v3, filt-VPLL.vin)
    net (filt-VPLL.vout, ftdi.VPLL)

    inst filt-VPHY : unbalanced-filter(ferrite)
    net (VDD-3v3, filt-VPHY.vin)
    net (filt-VPHY.vout, ftdi.VPHY)

    ; Test pin we will to ground through a jumper to give us
    ;  options should we need it.
    insert-resistor(ftdi.C.TEST, GND, R-query, resistance = 0.0)

    ; Configuration Interface
    insert-pullup(CFG.cs, VDD-3v3, qb = R-query)
    insert-pullup(CFG.clk, VDD-3v3, qb = R-query)
    insert-pullup(CFG.do, VDD-3v3, qb = R-query)

    ; Connect a DO -> FTDI.EEDATA through a 2k resistor
    ; See datasheet Section 7
    insert-resistor(
      CFG.di, CFG.do,
      R-query
      resistance = 2.0e3,
    )

    net (CFG.cs, ftdi.cfg.cs)
    net (CFG.clk, ftdi.cfg.clk)
    net (CFG.di, ftdi.cfg.do)

    ; Expose the UART and the JTAG to the system
    ;  so that we can use these for a debug/test interfaces
    ; connect-require-ports(ftdi, [dbg, acm])

    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ; FTDI Crystal
    ; 12MHz +/- 30ppm

    ; @TODO - write a check that the crystal meets the precision
    ;   requirement of 30ppm => 0.003%

    ; FIX ME - this crystal is 50ppm
    val xtal-type = passives/crystal/FA-238(12)

    val resonator-type = create-crystal-resonator(
      xtal-type = xtal-type,
      C-load = typ(property(xtal-type.C-load))
      ; FTDI doesn't list an input capacitance for the oscillator
      ;  pins so I'm using this as an estimate for a QFP style package.
      C-stray = typ(5.0e-12),
      V-rating = 2.0 * 3.3 ; AVDDH
    )

    inst resonator : resonator-type
    net (resonator.COMMON, GND)

    net (resonator.p[1], ftdi.C.OSCO)

    ; Add a series resistor for dampening if needed.
    insert-resistor(
      resonator.p[2], ftdi.C.OSCI,
      R-query,
      resistance = 0.0,
    )

    ; Self-Powered - Reset for FTDI on Cable Connect
    ; See section 2.4.4 Figure 2.6 in the hardware design guide.
    ;
    ; Assumes standard 5V power
    if self-powered-reset:
      val Vbus-V = 5.0
      inst R-t : create-resistor(R-query, resistance = 4.7e3)
      inst R-b : create-resistor(R-query, resistance = 10.0e3)
      inst C-b : create-capacitor(
        C-query,
        capacitance = 1.0e-9,
        rated-voltage = AtLeast( Vbus-V * 2.0)
      )

      net (VDD-USB.V+, R-t.p[1])
      net FTDI-reset (R-t.p[2], R-b.p[1], C-b.p[1])
      net (VDD-USB.V-, R-b.p[2], C-b.p[2])

      net (FTDI-reset, ftdi.C.RESET_n)
    else:
      insert-resistor(VDD-USB.V+, ftdi.C.RESET_n, R-query, resistance = 10.0e3)
  ; Return the instantiable
  circuit-int

