#use-added-syntax(jitx)
defpackage FTDI/components/FT2232HL :
  import core
  import jitx
  import jitx/commands
  import jitx/parts

  import jsl/bundles
  import jsl/si/helpers
  import jsl/protocols/usb
  import jsl/symbols
  import jsl/symbols/net-symbols
  import jsl/landpatterns
  import jsl/circuits/Network
  import jsl/circuits/Bypass

;Bus configuration mode selection enum
public pcb-enum FTDI/components/FT2232HL/FT2232H-Mode :
  FT2232H-RS232
  FT2232H-MPSSE

public pcb-component component () :

  manufacturer = "Future Technology Devices International"
  mpn = "FT2232HL"
  datasheet = "https://ftdichip.com/wp-content/uploads/2024/05/DS_FT2232H.pdf"
  reference-prefix = "U"

  pin-properties:
    [ pin:Ref  | pads:Int ... | bank:Int | side:Dir | row:Int | column:Int ]

    [ VREGIN   | 50           | 0        | Right    | 0       | -          ]
    [ VREGOUT  | 49           | 0        | Right    | 0       | -          ]
    [ DP       | 8            | 0        | Left     | 0       | -          ]
    [ DM       | 7            | 0        | Left     | 0       | -          ]
    [ REF      | 6            | 0        | Right    | 3       | -          ]
    [ RESET_n  | 14           | 0        | Left     | 1       | -          ]
    [ EECS     | 63           | 0        | Right    | 1       | -          ]
    [ EECLK    | 62           | 0        | Right    | 1       | -          ]
    [ EEDATA   | 61           | 0        | Right    | 1       | -          ]
    [ OSCI     | 2            | 0        | Left     | 2       | -          ]
    [ OSCO     | 3            | 0        | Left     | 2       | -          ]
    [ TEST     | 13           | 0        | Left     | 3       | -          ]

    [ PWREN_n  | 60           | 0        | Right    | 2       | -          ]
    [ SUSPEND_n  | 36           | 0        | Right    | 2       | -          ]

    [ ADBUS[0] | 16           | 1        | Left     | -       | -          ]
    [ ADBUS[1] | 17           | 1        | Left     | -       | -          ]
    [ ADBUS[2] | 18           | 1        | Left     | -       | -          ]
    [ ADBUS[3] | 19           | 1        | Left     | -       | -          ]
    [ ADBUS[4] | 21           | 1        | Left     | -       | -          ]
    [ ADBUS[5] | 22           | 1        | Left     | -       | -          ]
    [ ADBUS[6] | 23           | 1        | Left     | -       | -          ]
    [ ADBUS[7] | 24           | 1        | Left     | -       | -          ]

    [ ACBUS[0] | 26           | 1        | Right    | -       | -          ]
    [ ACBUS[1] | 27           | 1        | Right    | -       | -          ]
    [ ACBUS[2] | 28           | 1        | Right    | -       | -          ]
    [ ACBUS[3] | 29           | 1        | Right    | -       | -          ]
    [ ACBUS[4] | 30           | 1        | Right    | -       | -          ]
    [ ACBUS[5] | 32           | 1        | Right    | -       | -          ]
    [ ACBUS[6] | 33           | 1        | Right    | -       | -          ]
    [ ACBUS[7] | 34           | 1        | Right    | -       | -          ]

    [ BDBUS[0] | 38           | 2        | Left     | -       | -          ]
    [ BDBUS[1] | 39           | 2        | Left     | -       | -          ]
    [ BDBUS[2] | 40           | 2        | Left     | -       | -          ]
    [ BDBUS[3] | 41           | 2        | Left     | -       | -          ]
    [ BDBUS[4] | 43           | 2        | Left     | -       | -          ]
    [ BDBUS[5] | 44           | 2        | Left     | -       | -          ]
    [ BDBUS[6] | 45           | 2        | Left     | -       | -          ]
    [ BDBUS[7] | 46           | 2        | Left     | -       | -          ]

    [ BCBUS[0] | 48           | 2        | Right    | -       | -          ]
    [ BCBUS[1] | 52           | 2        | Right    | -       | -          ]
    [ BCBUS[2] | 53           | 2        | Right    | -       | -          ]
    [ BCBUS[3] | 54           | 2        | Right    | -       | -          ]
    [ BCBUS[4] | 55           | 2        | Right    | -       | -          ]
    [ BCBUS[5] | 57           | 2        | Right    | -       | -          ]
    [ BCBUS[6] | 58           | 2        | Right    | -       | -          ]
    [ BCBUS[7] | 59           | 2        | Right    | -       | -          ]

    [ GND[0]   | 1            | 3        | Left     | -       | -          ]
    [ GND[1]   | 5            | 3        | Left     | -       | -          ]
    [ GND[2]   | 11           | 3        | Left     | -       | -          ]
    [ GND[3]   | 15           | 3        | Left     | -       | -          ]
    [ GND[4]   | 25           | 3        | Left     | -       | -          ]
    [ GND[5]   | 35           | 3        | Left     | -       | -          ]
    [ GND[6]   | 47           | 3        | Left     | -       | -          ]
    [ GND[7]   | 51           | 3        | Left     | -       | -          ]
    [ AGND     | 10           | 3        | Left     | -       | -          ]

    [ VCORE[0] | 12           | 3        | Right    | -       | -          ]
    [ VCORE[1] | 37           | 3        | Right    | -       | -          ]
    [ VCORE[2] | 64           | 3        | Right    | -       | -          ]
    [ VCCIO[0] | 20           | 3        | Right    | -       | -          ]
    [ VCCIO[1] | 31           | 3        | Right    | -       | -          ]
    [ VCCIO[2] | 42           | 3        | Right    | -       | -          ]
    [ VCCIO[3] | 56           | 3        | Right    | -       | -          ]
    [ VPLL     | 9            | 3        | Right    | -       | -          ]
    [ VPHY     | 4            | 3        | Right    | -       | -          ]


  val box = BoxSymbol(self)
  set-grid(box, [4, 2], 0)
  set-head-margin(0.5, self.VCCIO[0])
  set-head-margin(0.5, self.VPLL)
  set-alignment(S, self.GND, self.AGND)

  val card-size = Dims(0.4, 0.3)
  add-decorator(box, self.SUSPEND_n, CardinalityDecorator(OutputPin, size = card-size))
  add-decorator(box, self.PWREN_n, CardinalityDecorator(OutputPin, size = card-size))
  add-decorator(box, self.RESET_n, CardinalityDecorator(InputPin, size = card-size))


  assign-symbols(
    0 => box
    1 => box
    2 => box
    3 => box
    )

  val pkg = QFP(
    num-leads = 64,
    lead-profile = QFP-Lead-Profile(
      span = 12.0 +/- 0.25
      pitch = 0.5,
      lead-length = 0.6 +/- 0.15,
      lead-width = 0.22 +/- 0.05
    ),
    thermal-lead? = false,
    package-body = PackageBody(
      width = 10.0 +/- 0.1,
      length = 10.0 +/- 0.1,
      height = 1.50 +/- 0.1,
    )
  )

  assign-landpattern $ create-landpattern(pkg)


; Hardware User Guide:
; https://ftdichip.com/wp-content/uploads/2020/08/AN_146_USB_Hardware_Design_Guidelines_for_FTDI_ICs.pdf


doc: \<DOC>
FTDI Microwire Comms Bundle

The FTDI chip has a restricted Microwire protocol
interface with only 3 wires. It is a half-duplex style
interface instead of the Microwire spec which is full-duplex.
This bundle encodes this bus for easier code development -
but is not intended to be a general purpose bundle.
<DOC>
public pcb-bundle FTDI-microwire :
  port cs
  port clk
  port data


doc: \<DOC>

@param use-internal-1v8 This flag indicates whether the internal
voltage register will be used to create the 1.8V rail for VCORE.
If `true`, the module will create the necessary connections and
capacitors to drive `VCORE` from `VREGOUT`. THe input to the
regulator will be derived from the `VCCIO` power input.
If `false`, then the user is expected to drive `VCORE` to provide
a 1.8V rail.
<DOC>
public pcb-module device (mode-a:FT2232H-Mode, mode-b:FT2232H-Mode -- use-internal-1v8:True|False = true) :

  port GND : pin
  port VCORE : power
  port VCCIO : power
  port VPLL : power
  port VPHY : power

  port USB : usb-data
  port cfg : FTDI-microwire

  public inst C : component()

  if mode-b != FT2232H-MPSSE:
    ; Power Save Port
    ;  This port is only available if we don't use `MPSSE` mode
    ;  for Port B.

    port PWRSAV
    net (PWRSAV, C.BCBUS[7])

  net (GND VCORE.V- VCCIO.V-, VPLL.V-, VPHY.V-)
  for p in pins(C.GND) do :
    net (GND p)

  net (GND, C.AGND)

  net rail-3v3 (VCCIO.V+)
  val VCCIO-V = 3.3
  for p in pins(C.VCCIO) do :
    net (rail-3v3 p)

  net rail-1v8 (VCORE.V+)
  val VCORE-V = 1.8
  for p in pins(C.VCORE) do :
    net (rail-1v8 p)

  net (VPLL.V+, C.VPLL)
  net (VPHY.V+, C.VPHY)

  topo-net(USB.data.P => C.DP)
  topo-net(USB.data.N => C.DM)

  make-bus-supports(C.ADBUS as Pin, C.ACBUS as Pin, mode-a)
  make-bus-supports(C.BDBUS as Pin, C.BCBUS as Pin, mode-b)

  ; Wire up the microwire configuration bus
  net (cfg.cs, C.EECS)
  net (cfg.clk, C.EECLK)
  net (cfg.data, C.EEDATA)

  ; The REF pin tunes the internal transceiver
  ;   this resistor sets the current used.
  insert-resistor(
    C.REF, GND,
    resistance = 12.0e3
    precision = (1 %)
  )

  ; Setup Bypass Capacitors for Rails

  ; Voltage Margin Relative to the intended voltage.
  ;  This helps set the minimum voltage range to search.
  val cap-margin = 2.0

  ; Set a maximum voltage search range for components -
  ;  this just limits the search range to something reasonable
  ;  for low voltage devices like this.
  val max-voltage = 16.0

  ; See Section 6.2 -

  val bypass-query = CapacitorQuery(
    type = "ceramic",
    temperature-coefficient_code = "X7R",
    precision = (10 %)
    sort! = SortKey(rated-voltage = Increasing)
  )

  val cap-100nF = create-capacitor(
      bypass-query,
      capacitance = 100.0e-9,
      rated-voltage = AtLeast(cap-margin * VCCIO-V)
  )

  if use-internal-1v8 :
    ; Use the internal VREG to drive VCORE
    net (rail-3v3, C.VREGIN)
    val C-in = insert-bypass(C.VREGIN, GND, elem-type = cap-100nF)

    net (rail-1v8, C.VREGOUT)
    symbol(rail-1v8) = PWR-SYMB

    val cap-3u3 = create-capacitor(
      bypass-query,
      capacitance = 3.3e-6
      rated-voltage = AtLeast(cap-margin * VCORE-V)
    )
    val C-out = insert-bypass(C.VREGOUT, GND, elem-type = cap-3u3)
    schematic-group([C-in, C-out]) = VREG-caps

  ; Rail Bypass Capacitors
  for p in ports(C.VCORE) do :
    val c = insert-bypass(p, GND, elem-type = cap-100nF)
    schematic-group(c) = bypass-caps

  for p in ports(C.VCCIO) do :
    val c = insert-bypass(p, GND, elem-type = cap-100nF)
    schematic-group(c) = bypass-caps

  val cap-4u7 = Elem $ create-capacitor(
    bypass-query,
    capacitance = 4.7e-6,
    rated-voltage = AtLeast(cap-margin * VCCIO-V)
  )

  val bypass-circ = create-circuit(cap-4u7 | Elem(cap-100nF))
  insert-bypass(C.VPHY, GND, elem-type = bypass-circ)
  insert-bypass(C.VPLL, GND, elem-type = bypass-circ)

defn make-bus-supports (bus-d:Pin, bus-c:Pin, mode:FT2232H-Mode) -> False :
  switch(mode) :
    FT2232H-RS232 :
      make-uart-support(bus-d)
    FT2232H-MPSSE :
      make-jtag-support(bus-d, bus-c)

;Basic UART bundle with Flow Control
val uart-b = uart-fc()

defn make-uart-support (bus-d:Pin) -> False :
  inside pcb-module :
    supports uart-b :
      uart-b.tx  => bus-d[0]
      uart-b.rx  => bus-d[1]
      uart-b.rts => bus-d[2]
      uart-b.cts => bus-d[3]

defn make-jtag-support (bus-d:Pin, bus-c:Pin) -> False :
  inside pcb-module :
    supports jtag :
      jtag.tck => bus-d[0]
      jtag.tdi => bus-d[1]
      jtag.tdo => bus-d[2]
      jtag.tms => bus-d[3]
    for i in 4 to 8 do :
      supports gpio :
        gpio.gpio => bus-d[i]
    for i in 0 to 8 do :
      supports gpio :
        gpio.gpio => bus-c[i]



